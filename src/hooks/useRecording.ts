import { useState, useEffect, useRef } from 'react';
import type {
  SpeechRecognitionEvent,
  SpeechRecognitionErrorEvent,
} from '../types/speech'; // „Éë„Çπ„ÅØ„Éï„Ç°„Ç§„É´ÊßãÊàê„Å´Âêà„Çè„Åõ„Å¶‰øÆÊ≠£

interface ExtendedSpeechRecognition extends SpeechRecognition {
  onstart?: () => void;
  onaudiostart?: () => void;
  onspeechstart?: () => void;
}

// ÂûãÂÆöÁæ©ÔºàSpeechRecognition „Çí‰Ωø„ÅÜ„Åü„ÇÅÔºâ
type SpeechRecognitionType = typeof window.SpeechRecognition extends undefined
  ? typeof window.webkitSpeechRecognition
  : typeof window.SpeechRecognition;

export const useRecording = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [isSupported, setIsSupported] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [debugLog, setDebugLog] = useState('');
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const recognitionRef = useRef<InstanceType<SpeechRecognitionType> | null>(null);
  const streamRef = useRef<MediaStream | null>(null);

  // „É≠„Ç∞Âá∫ÂäõÈñ¢Êï∞Ôºà„Çπ„Éû„Éõ„Å´„ÇÇË°®Á§∫Áî®Ôºâ
  const log = (message: string) => {
    console.log(message);
    setDebugLog(prev => prev + '\n' + message);
  };

  // Check browser support
  useEffect(() => {
    const hasMediaRecorder = 'MediaRecorder' in window;
    const hasSpeechRecognition = 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;
    setIsSupported(hasMediaRecorder && hasSpeechRecognition);

    if (!hasMediaRecorder) {
      setError('„Åä‰Ωø„ÅÑ„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØÈü≥Â£∞Èå≤Èü≥„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ');
    } else if (!hasSpeechRecognition) {
      setError('„Åä‰Ωø„ÅÑ„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØÈü≥Â£∞Ë™çË≠ò„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇChrome„ÄÅEdge„ÄÅSafari„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ');
    }
  }, []);

  const startRecording = async () => {
    if (isRecording) {
      log('‚ö†Ô∏è Èå≤Èü≥‰∏≠„ÅÆ„Åü„ÇÅ startRecording „Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô');
      return;
    }
    
    log('üé¨ startRecording „ÅåÂëº„Å∞„Çå„Åæ„Åó„Åü'); // ÊúÄÂàù„Å´ËøΩÂä†
    if (!isSupported) {
      setError('Èü≥Â£∞Èå≤Èü≥„Åæ„Åü„ÅØÈü≥Â£∞Ë™çË≠ò„Åå„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ');
      return;
    }

    try {
      setError(null);

    let stream: MediaStream;
    try {
      stream = await navigator.mediaDevices.getUserMedia({
      audio: {
        echoCancellation: true,
        noiseSuppression: true,
        sampleRate: 44100,
      },
      });
      log('üéô „Éû„Ç§„ÇØ„ÅÆÂèñÂæó„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü');
    } catch (e) {
      log('‚ùå „Éû„Ç§„ÇØÂèñÂæóÂ§±Êïó: ' + (e instanceof Error ? e.message : String(e)));
      setError('„Éû„Ç§„ÇØ„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éñ„É©„Ç¶„Ç∂„ÅÆË®≠ÂÆö„ÇÑÊ®©Èôê„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }

    let mediaRecorder: MediaRecorder;

    try {
      mediaRecorder = new MediaRecorder(stream, {
      mimeType: 'audio/webm;codecs=opus',
      });
      log('üéõ MediaRecorder „ÅÆ‰ΩúÊàê„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü');
    } catch (err) {
      console.error('üé§ MediaRecorder „ÅÆ‰ΩúÊàê„Å´Â§±Êïó:', err);
      setError('Èå≤Èü≥Ê©üËÉΩ„Åå„Åì„ÅÆ„Éñ„É©„Ç¶„Ç∂„Åß„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åã„ÄÅÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
      return;
    }
      mediaRecorderRef.current = mediaRecorder;

      // const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      // log('üß† SpeechRecognition „Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰ΩúÊàê„Åó„Åæ„Åô');

      // const recognition = new SpeechRecognition() as ExtendedSpeechRecognition;
      // log('üß† SpeechRecognition „ÅÆ‰ΩúÊàê„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü');
      // 
      // recognition.onstart = () => {
      //   log('üéô onstart: Èü≥Â£∞Ë™çË≠ò„ÅåÈñãÂßã„Åï„Çå„Åæ„Åó„Åü');
      // };

      // recognition.onaudiostart = () => {
      //   log('üéß onaudiostart: Èü≥Â£∞ÂÖ•Âäõ„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü');
      // };

      // recognition.onspeechstart = () => {
      //   log('üó£ onspeechstart: Èü≥Â£∞„ÅåË©±„Åï„ÇåÂßã„ÇÅ„Åæ„Åó„Åü');
      // };

      // recognition.continuous = false;
      // recognition.interimResults = true;
      // recognition.lang = 'ja-JP';
      // recognition.maxAlternatives = 1;

      // let finalTranscript = '';

      // recognition.onresult = (event: SpeechRecognitionEvent) => { ... };
      // recognition.onerror = (event: SpeechRecognitionErrorEvent) => { ... };
      // recognition.onend = () => { ... };

      // recognitionRef.current = recognition;

      const chunks: Blob[] = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunks.push(event.data);
        }
      };

      mediaRecorder.onstop = async () => {
        const blob = new Blob(chunks, { type: 'audio/webm' });
        log('üé§ Èå≤Èü≥„Éï„Ç°„Ç§„É´ÔºàblobÔºâ„ÇíGoogle Cloud API„Å´ÈÄÅ‰ø°„Åó„Åæ„Åô');
        try {
          const formData = new FormData();
          formData.append('file', blob, 'audio.webm');
          const res = await fetch('/api/transcribe', {
            method: 'POST',
            body: formData
          });
          const data = await res.json();
          if (data.text) {
            setTranscript(data.text);
            log('‚úÖ Google Cloud API„Åã„Çâ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó„Åó„Åæ„Åó„Åü');
          } else {
            setError('Google Cloud API„Åã„Çâ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü');
            log('‚ùå Google Cloud API„Åã„Çâ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü');
          }
        } catch (err) {
          setError('Google Cloud API„Å∏„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
          log('‚ùå Google Cloud API„Å∏„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + err);
        }
      };

      mediaRecorder.start();

      setIsRecording(true);
      setTranscript('');
    } catch (error) {
      console.error('Error starting recording:', error);
      if (error instanceof Error) {
        setError(`Èå≤Èü≥ÈñãÂßã„Ç®„É©„Éº: ${error.message}`);
      } else {
        setError('Èå≤Èü≥„ÇíÈñãÂßã„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ');
      }
    }
  };

  const stopRecording = () => {
    setIsRecording(false);
    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {
      mediaRecorderRef.current.stop();
    }
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
    if (streamRef.current) {
      streamRef.current.getTracks().forEach((track) => track.stop());
      streamRef.current = null;
    }
  };

  const downloadTranscript = () => {
    if (!transcript.trim()) {
      setError('„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åô„ÇãÊñáÂ≠óËµ∑„Åì„Åó„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
      return;
    }

    const file = new Blob([transcript], { type: 'text/plain;charset=utf-8' });
    const element = document.createElement('a');
    element.href = URL.createObjectURL(file);
    element.download = `‰ºöË≠∞Ë≠∞‰∫ãÈå≤_${new Date().toLocaleDateString('ja-JP')}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  useEffect(() => {
    return () => {
      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {
        mediaRecorderRef.current.stop();
      }
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
      if (streamRef.current) {
        streamRef.current.getTracks().forEach((track) => track.stop());
      }
    };
  }, []);

  return {
    isRecording,
    transcript,
    isSupported,
    error,
    debugLog,
    startRecording,
    stopRecording,
    downloadTranscript,
  };
};

// „Ç∞„É≠„Éº„Éê„É´ÂûãÂÆ£Ë®Ä
declare global {
  interface Window {
    SpeechRecognition: {
      new (): SpeechRecognition;
    };
    webkitSpeechRecognition: {
      new (): SpeechRecognition;
    };
  }
}